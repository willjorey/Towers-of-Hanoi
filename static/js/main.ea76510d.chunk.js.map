{"version":3,"sources":["objects/disc.js","App.js","serviceWorker.js","index.js"],"names":["Disc","size","Object","classCallCheck","this","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","initializeGame","list","i","push","setState","board","input","moves","num_discs","new_moveDisc","p1","p2","length","pop","error","state","onClickCol","index","from","renderDiscs","copy","slice","reverse","react_default","a","createElement","id","map","disc","key","style","backgroundColor","width","inputChange","event","target","value","execute","arr","split","undefined","increment","toConsumableArray","b1","decrement","discs","_this2","className","marginLeft","listStyleType","display","padding","fontSize","onClick","height","marginTop","type","onChange","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea76510d.chunk.js","sourcesContent":["\nexport default class Disc {\n  constructor(size){\n      this.size = size;\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Disc from './objects/disc';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      board: [[],[],[]],\n      num_discs: 3,\n      moves: 0,\n      error: '',\n    }\n  }\n\n  componentDidMount(){\n    this.initializeGame();\n    // this.moveDisc(2, this.state.board[0], this.state.board[2]);\n    // this.moveDisc(1, this.state.board[0], this.state.board[1]);\n    // this.moveDisc(0, this.state.board[2], this.state.board[1]);\n    // this.moveDisc(0, this.state.board[0], this.state.board[2]);\n    // this.moveDisc(1, this.state.board[1], this.state.board[0]);\n    // this.moveDisc(0, this.state.board[1], this.state.board[2]);\n    // this.moveDisc(0, this.state.board[0], this.state.board[2]);\n  };\n  \n  initializeGame = () =>{\n    var list = [[],[],[]];\n    for ( let i = 0; i < 3; i++){\n      list[0].push(new Disc(3 - i));\n    }\n    this.setState({\n      board: list,\n      input: '',\n      moves: 0,\n      num_discs: 3,\n    }, );\n  };\n\n  new_moveDisc = (p1, p2) =>{\n    // p1 is the list of discs contiaining  the disc we want to move\n    // p2 is the destination platform of the disc we're moving\n\n    if (p1.length !== 0 ){\n    // No discs on platform\n      if(p2.length === 0){\n        p2.push(p1.pop())\n      //At least one disc on platform, commpare sizes if the moving piece is bigger then can't move else move it\n      }else{\n        var disc = p1[p1.length - 1]\n        if(disc.size > p2[p2.length - 1].size){\n          this.setState({\n            error:'Disc too big to move'\n          });\n        }else{\n          p2.push(p1.pop());\n        }\n      }\n    }\n    this.setState({\n      board: this.state.board\n    })\n  }\n  onClickCol = (index) => {\n    this.setState({\n      from: index\n    })\n  }\n\n  renderDiscs = (list) =>{\n    var copy = list.slice().reverse()\n    return(\n      <div id='platform'>\n        {copy.map((disc,i) =>{\n          return(\n            <div id='disc-container' key={i}>\n              <div  id='disc' style={{backgroundColor: 'lightblue' , width: disc.size * 75}}/>\n            </div>\n            )\n        })}\n      </div>\n    )\n  }\n\n  inputChange = (event) =>{\n    this.setState({\n      input: event.target.value\n    })\n  }\n\n  execute = () =>{\n    let arr = this.state.input.split(\" \");\n    let board = this.state.board;\n    if (arr[1]!== undefined && arr[0] !== undefined){\n      let p1 = board[arr[0] - 1];\n      let p2 = board[arr[1] - 1]\n      this.new_moveDisc(p1 , p2);\n      this.setState({\n        moves: this.state.moves + 1,\n      })\n    }\n\n  }\n\n  increment = () =>{\n    var list = [...this.state.board[0]];\n    list.reverse();\n    list.push(new Disc(this.state.num_discs + 1));\n    list.reverse();\n    var b1 = [list,[],[]];\n    this.setState({\n      num_discs: this.state.num_discs + 1,\n      board: b1\n    })\n  }\n\n  decrement = () =>{\n    var discs = this.state.num_discs;\n    var list = this.state.board[0];\n    list = list.slice(1)\n    var b1 = [list,[],[]];\n    if ( discs - 1 !== 0 ){\n      this.setState({\n        num_discs: discs - 1,\n        board: b1\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Towers of Hanoi</h1>\n        <p>Move all the discs from Platform 1 to Platform 3 in the same order as they started in.</p>\n        <div style={{width:'500px', marginLeft:'37%'}}>\n          <h4>Rules</h4>\n          <ul style={{listStyleType: 'square'}}>\n            <li>A disc cannot be placed on top of a smaller disc</li>\n            <li>You can only move the top disc on a given platform</li>\n          </ul>\n        </div>\n\n        <div id='board'>\n        <div>\n          <p style={{display: 'inline', padding: '15px', fontSize: '30px'}}>Number of Discs: {this.state.num_discs}</p>\n          <button style={{display: 'inline'}} onClick={this.increment}>+</button>\n          <button style={{display: 'inline'}} onClick={this.decrement}>-</button>\n          <p style={{marginLeft: '30px', padding: '20px' ,display: 'inline', fontSize: '30px'}}>Move Counter: {this.state.moves} </p>\n        </div>\n            <table>\n              <tbody>\n              <tr id='one' style={{height: '300px'}}>\n                <td>{this.renderDiscs(this.state.board[0])}</td>\n                <td>{this.renderDiscs(this.state.board[1])}</td>\n                <td>{this.renderDiscs(this.state.board[2])}</td>\n              </tr>\n              <tr>\n                <td><div style={{width:'400px', height: '25px', backgroundColor: 'black'}}/></td>\n                <td><div style={{width:'400px', height: '25px', backgroundColor: 'black'}}/></td>\n                <td><div style={{width:'400px', height: '25px', backgroundColor: 'black'}}/></td>\n              </tr>\n              <tr>\n                <td>Platform 1</td>\n                <td>Platform 2</td>\n                <td>Platform 3</td>\n              </tr>\n              </tbody>\n            </table>\n        </div>\n        <br/>\n        <button style={{marginTop: '20px'}}onClick={this.initializeGame}>New Game</button>\n        \n        <br/>\n        <h3>Input Commands</h3>\n        <p>To move a disc from Platform 1 to Platform 2, enter in the text area: <b style={{fontSize: '20px'}}>'1 2'</b>  then submit</p>\n        <div>\n          <textarea style={{ height: '20px', width: '300px'}} type='text' onChange={this.inputChange}/>\n          <input type='submit' value='Submit' onClick={() => this.execute()}/>\n        </div>\n        <br/>\n        <h2 style={{color: 'red'}}>{this.state.error}</h2>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}